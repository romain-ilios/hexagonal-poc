{"version":3,"sources":["../todo/infrastructure/local/todoRepository.ts","../todo/application/todoService.ts","../todo/application/todoStore.ts","../serviceLocator.ts","../todo/application/react/useTodos.ts","../todo/application/vue/useTodos.ts"],"names":["todoRepository","todoStore","uuidv4","useTodos"],"mappings":"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","file":"index.mjs","sourcesContent":["import { ITodo, ITodoRepository } from \"../../domain/todo\";\n\n/**\n * Local storage implementation of ITodoRepository\n * Stores todos in the browser's localStorage\n */\nexport class LocalTodoRepository implements ITodoRepository {\n  private readonly STORAGE_KEY = \"todo:items\";\n\n  getTodos(): Promise<ITodo[]> {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        const todos = localStorage.getItem(this.STORAGE_KEY);\n        resolve(todos ? JSON.parse(todos) : []);\n      }, 1000);\n    });\n  }\n\n  saveTodos(todos: ITodo[]): Promise<void> {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(todos));\n        resolve();\n      }, 500);\n    });\n  }\n}\n","import {\n  IAddTodoParams,\n  ITodoRepository,\n  ITodoStore,\n  ITodoUpdateParams,\n} from \"../domain/todo\";\n\nimport { ITodoService } from \"../domain/todo\";\n\nexport class TodoService implements ITodoService {\n  constructor(\n    private readonly todoRepository: ITodoRepository,\n    private readonly todoStore: ITodoStore\n  ) {}\n\n  async getInitialTodos(): Promise<void> {\n    this.todoStore.setIsLoading(true);\n    try {\n      const todos = await this.todoRepository.getTodos();\n      this.todoStore.setTodos(todos);\n    } catch (error) {\n      this.todoStore.setError(error as string);\n    } finally {\n      this.todoStore.setIsLoading(false);\n    }\n  }\n\n  async addTodo(params: IAddTodoParams): Promise<void> {\n    const oldTodos = this.todoStore.getTodosSnapshot();\n\n    try {\n      this.todoStore.addTodo(params);\n      this.saveTodos();\n    } catch (error) {\n      this.todoStore.setError(error as string);\n      this.todoStore.setTodos(oldTodos);\n    }\n  }\n\n  async updateTodo(id: string, params: ITodoUpdateParams): Promise<void> {\n    const oldTodos = this.todoStore.getTodosSnapshot();\n\n    try {\n      this.todoStore.updateTodo(id, params);\n      this.saveTodos();\n    } catch (error) {\n      this.todoStore.setError(error as string);\n      this.todoStore.setTodos(oldTodos);\n    }\n  }\n\n  async deleteTodo(id: string): Promise<void> {\n    const oldTodos = this.todoStore.getTodosSnapshot();\n\n    try {\n      this.todoStore.deleteTodo(id);\n      this.saveTodos();\n    } catch (error) {\n      this.todoStore.setError(error as string);\n      this.todoStore.setTodos(oldTodos);\n    }\n  }\n\n  async saveTodos(): Promise<void> {\n    try {\n      const todos = this.todoStore.getTodosSnapshot();\n      await this.todoRepository.saveTodos(todos);\n    } catch (error) {\n      this.todoStore.setError(error as string);\n    }\n  }\n}\n","import { BehaviorSubject, Observable } from \"rxjs\";\nimport {\n  IAddTodoParams,\n  ITodo,\n  ITodoStore,\n  ITodoUpdateParams,\n} from \"../domain/todo\";\n\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport class TodoStore implements ITodoStore {\n  /**\n   * The todos observable\n   */\n  public readonly todos$ = new BehaviorSubject<ITodo[]>([]);\n\n  /**\n   * The isLoading observable\n   */\n  public readonly isLoading$ = new BehaviorSubject<boolean>(false);\n\n  /**\n   * The error observable\n   */\n  public readonly error$ = new BehaviorSubject<string | null>(null);\n\n  /**\n   * Get the todos observable\n   * @returns the todos observable\n   */\n  getTodosObservable(): Observable<ITodo[]> {\n    return this.todos$.asObservable();\n  }\n\n  /**\n   * Get the todos snapshot\n   * @returns the todos snapshot\n   */\n  getTodosSnapshot(): ITodo[] {\n    return this.todos$.getValue();\n  }\n\n  /**\n   * Get the isLoading observable\n   * @returns the isLoading observable\n   */\n  getIsLoadingObservable(): Observable<boolean> {\n    return this.isLoading$.asObservable();\n  }\n\n  /**\n   * Get the error observable\n   * @returns the error observable\n   */\n  getErrorObservable(): Observable<string | null> {\n    return this.error$.asObservable();\n  }\n\n  /**\n   * Get the isLoading snapshot\n   * @returns the isLoading snapshot\n   */\n  getIsLoadingSnapshot(): boolean {\n    return this.isLoading$.getValue();\n  }\n\n  /**\n   * Get the error snapshot\n   * @returns the error snapshot\n   */\n  getErrorSnapshot(): string | null {\n    return this.error$.getValue();\n  }\n\n  /**\n   * Set the todos\n   * @param todos the todos\n   */\n  setTodos(todos: ITodo[]): void {\n    this.todos$.next(todos);\n  }\n\n  /**\n   * Add a todo\n   * @param params the todo params\n   * @returns void\n   */\n  addTodo(params: IAddTodoParams): void {\n    const newTodo = {\n      id: uuidv4(),\n      description: params.description,\n      completed: false,\n    };\n    this.todos$.next([...this.todos$.getValue(), newTodo]);\n  }\n\n  /**\n   * Update a todo\n   * @param id the todo id\n   * @param params the todo params\n   * @returns void\n   */\n  updateTodo(id: string, params: ITodoUpdateParams): void {\n    const todos = this.todos$.getValue();\n    const updatedTodos = todos.map((todo) =>\n      todo.id === id ? { ...todo, ...params } : todo\n    );\n    this.todos$.next(updatedTodos);\n  }\n\n  /**\n   * Delete a todo\n   * @param id the todo id\n   * @returns void\n   */\n  deleteTodo(id: string): void {\n    const todos = this.todos$.getValue();\n    const updatedTodos = todos.filter((todo) => todo.id !== id);\n    this.todos$.next(updatedTodos);\n  }\n\n  /**\n   * Set the error\n   * @param error the error\n   */\n  setError(error: string): void {\n    this.error$.next(error);\n  }\n\n  /**\n   * Set the isLoading\n   * @param isLoading the isLoading\n   */\n  setIsLoading(isLoading: boolean): void {\n    this.isLoading$.next(isLoading);\n  }\n}\n","import { LocalTodoRepository } from \"./todo/infrastructure/local/todoRepository\";\nimport { TodoService } from \"./todo/application/todoService\";\nimport { TodoStore } from \"./todo/application/todoStore\";\n\nexport const todoStore = new TodoStore();\nexport const todoRepository = new LocalTodoRepository();\nexport const todoService = new TodoService(todoRepository, todoStore);\n","import { useEffect, useState } from \"react\";\nimport { todoService, todoStore } from \"../../../serviceLocator\";\nimport type { ITodo, ITodoUpdateParams } from \"../../domain/todo\";\n\nexport function useTodos() {\n  const [todos, setTodos] = useState<ITodo[]>(todoStore.getTodosSnapshot());\n  const [isLoading, setIsLoading] = useState<boolean>(\n    todoStore.getIsLoadingSnapshot()\n  );\n  const [error, setError] = useState<string | null>(\n    todoStore.getErrorSnapshot()\n  );\n\n  useEffect(() => {\n    const subscription = todoStore.getTodosObservable().subscribe(setTodos);\n    const isLoadingSubscription = todoStore\n      .getIsLoadingObservable()\n      .subscribe(setIsLoading);\n    const errorSubscription = todoStore\n      .getErrorObservable()\n      .subscribe(setError);\n\n    todoService.getInitialTodos();\n\n    return () => {\n      subscription.unsubscribe();\n      isLoadingSubscription.unsubscribe();\n      errorSubscription.unsubscribe();\n    };\n  }, []);\n\n  function addTodo(description: string) {\n    todoService.addTodo({ description });\n  }\n\n  function updateTodo(id: string, params: ITodoUpdateParams) {\n    todoService.updateTodo(id, params);\n  }\n\n  function deleteTodo(id: string) {\n    todoService.deleteTodo(id);\n  }\n\n  return { todos, isLoading, error, addTodo, updateTodo, deleteTodo };\n}\n","import { onMounted, onUnmounted, ref } from \"vue\";\nimport { todoService, todoStore } from \"../../../serviceLocator\";\nimport type { ITodo, ITodoUpdateParams } from \"../../domain/todo\";\n\nexport function useTodos() {\n  const todos = ref<ITodo[]>(todoStore.getTodosSnapshot());\n  const isLoading = ref<boolean>(todoStore.getIsLoadingSnapshot());\n  const error = ref<string | null>(todoStore.getErrorSnapshot());\n\n  let todosSubscription: any;\n  let isLoadingSubscription: any;\n  let errorSubscription: any;\n\n  onMounted(() => {\n    todosSubscription = todoStore\n      .getTodosObservable()\n      .subscribe((newTodos: ITodo[]) => {\n        todos.value = newTodos;\n      });\n\n    isLoadingSubscription = todoStore\n      .getIsLoadingObservable()\n      .subscribe((newIsLoading: boolean) => {\n        isLoading.value = newIsLoading;\n      });\n\n    errorSubscription = todoStore\n      .getErrorObservable()\n      .subscribe((newError: string | null) => {\n        error.value = newError;\n      });\n\n    todoService.getInitialTodos();\n  });\n\n  onUnmounted(() => {\n    todosSubscription?.unsubscribe();\n    isLoadingSubscription?.unsubscribe();\n    errorSubscription?.unsubscribe();\n  });\n\n  function addTodo(description: string) {\n    todoService.addTodo({ description });\n  }\n\n  function updateTodo(id: string, params: ITodoUpdateParams) {\n    todoService.updateTodo(id, params);\n  }\n\n  function deleteTodo(id: string) {\n    todoService.deleteTodo(id);\n  }\n\n  return {\n    todos,\n    isLoading,\n    error,\n    addTodo,\n    updateTodo,\n    deleteTodo,\n  };\n}\n"]}